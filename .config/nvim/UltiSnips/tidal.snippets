extends live_coding

global !p

def cycle_index():
	i = vim.current.window.cursor[0] - 1
	regex = f'^\s*d([0-9]+)'
	while i >= 0:
		m = re.match(regex, snip.buffer[i])
		if m:
			return int(m.group(1))
		i -= 1
	return 0

endglobal

# JIT like

snippet j "Sound pattern" b
d${1:`!p if not snip.c: snip.rv = cycle_index() + 1`} $ $0
endsnippet

snippet k "6 and 7 channels are with longer fadeTime to reduce clipping if present" b
d${1:6} $ $0
endsnippet

snippet jj "Sound pattern on new line" b
d${1:`!p if not snip.c: snip.rv = cycle_index() + 1`}
$ $0
endsnippet

snippet jo "Play once independant of cycles. Slow ruins it." b
once $$1 s "${VISUAL}$2"
endsnippet

snippet js "Silence a pattern" b
d${1:`!p if not snip.c: snip.rv = cycle_index()`} silence
endsnippet

snippet j1 "Silence all except this" b
solo ${1:`!p if not snip.c: snip.rv = cycle_index()`}
endsnippet

snippet ju "Undo solo action" b
unsolo ${1:`!p if not snip.c: snip.rv = cycle_index()`}
endsnippet

snippet D "Deconstruct" b
deconstruct ${1:n} ${2:str}
endsnippet

# https://github.com/tidalcycles/Tidal/issues/530
snippet set "Interpolation. Only works for sound" w
setS "foo" (iter 4 "bd sn [cp cp:4] bd*8")
d1 $ s "bd*2 cp:3 bd ^foo"
endsnippet

snippet map "Mappings to trigger short sounds" b
nmap <M-z> :TidalSend1 asap $ s "glitch:3" <cr>
nmap <M-x> :TidalSend1 asap $ s "glitch:6" <cr>
endsnippet

# Functions

snippet .. "" w
${1:0} .. $2
endsnippet

snippet < "Unpredictable when values change during cycle" w
($1 <~)
endsnippet

snippet > "" w
($1 ~>)
endsnippet

snippet arpg "Spread chords of note numbers over time" w
arpg "$1"
endsnippet

snippet arp "With arpeggiate modes" w
arp "$1" "$2"
endsnippet

snippet rot "Rotate to the left. Preserves the structure (~). _ and @n are attached to element" w
rot "$1"
endsnippet

snippet cat "Concat for different cycles. Pattern maintains it's original duration." w
cat [$1]
endsnippet

snippet fc "concat for same cycle" w
fastcat [${VISUAL}$1]
endsnippet

snippet append "same as cat family, but applies to diff cycles simlar to <> " w
append (${VISUAL}$1) ($2)
endsnippet

snippet fA "same as cat family, but applies to diff cycles simlar to <> " w
fastAppend (${VISUAL}$1) ($2)
endsnippet

snippet ltp "" w
listToPat ([$1])
endsnippet

snippet fl "" w
fromList ([$1])
endsnippet

snippet fm "" w
fromMaybes ([$1])
endsnippet

snippet within "" w
within (0.${1:0}, ${2:1}) ($3)
endsnippet

snippet linger "" w
linger ${1:0.25}
endsnippet

snippet trunc "" w
trunc ${1:0.25}
endsnippet

snippet zoom "" w
zoom (0.${1:0}, ${2:1})
endsnippet

snippet compress "" w
compress (0.${1:0}, ${2:1})
endsnippet

snippet palindrome "" w
palindrome
endsnippet

snippet inside "" w
inside "$1" ($2)
endsnippet

snippet brak "Breakbeat feel. every 2 squash the pattern to fit half of cycle and offset by quarter" w
brak
endsnippet

snippet fit "" w
fit ${1:3} [$2] "$3"
endsnippet

snippet bite "" w
bite ${1:n} "$2"
endsnippet

snippet press "" w
press "$2"
endsnippet

snippet pB "" w
pressBy 0.${1:7} "$2"
endsnippet

snippet chew "Same as bite but also speeds. Similar to hurry vs speed" w
chew ${1:n} "$2"
endsnippet

snippet slice "Same as bite but for samples" w
slice ${1:8} "$2"
endsnippet

snippet rs "" w
randslice ${1:4} "$2"
endsnippet

snippet splice "Same as chew but for samples" w
splice ${1:8} "$2"
endsnippet

snippet stripe "" w
stripe ${1:2}
endsnippet

snippet chop "Cuts each sample into n parts. Granula synthesis effect" w
chop ${1:8}
endsnippet

snippet lA "Squash sample rate into n cycles. Only works for samples." w
loopAt ${1:8}
endsnippet

snippet ply "Repeats each event the given number of times. Excluding rests (~)" w
ply "$1"
endsnippet

snippet if "" w
fix ($1) (${2:s} "$3")
endsnippet

snippet uif "" w
unfix ($1) (${2:s} "$3")
endsnippet

snippet ife "" w
contrast ($1) ($2) (${3:s} "$3")
endsnippet

snippet jux "" w
jux ($1)
endsnippet

snippet rev "" w
rev
endsnippet

snippet slow "" w
slow $0
endsnippet

snippet fast "" w
fast $0
endsnippet

snippet range "" w
range ${1:lo} ${2:hi} ${3:sine}
endsnippet

snippet segment "Useful for turning a continuous pattern into a discrete one." w
(segment ${1:16} $ range $2 $3 $ $4)
endsnippet

snippet sb "iter, operator, fun. Usually embedded in other function (e.g. n or up). Does not work with control patterns?" w
snowball ${1:4} (${2:+}) (${3:slow 1})
endsnippet

snippet soak "less general snowball. Applies new pattern by multiplying previous. Works with control patterns" w
soak ${1:4} ($2)
endsnippet

snippet wm "" w
whenmod ${1:9} ${2:7} ($3)
endsnippet

snippet wh "chunk but boolean" w
while "${1:1 0}" ($2)
endsnippet

snippet il "16 cycles. Sine waves. Changes shape control." w
interlace ($1) ($2)
endsnippet

snippet il1 "Interlace manually" w
d1 $ n $1 # s "$2" # ${3:legato} (slow ${4:16} $ ${5:sine} * ${6:1.2})
d2 $ n $1 # s "$2" # $3 (${7:8} <~ (slow $4 $ $5 * $6))
endsnippet

snippet weave "Similar to interlace. But can me customized more easily" w
weave ${1:16} (${2:gain} ${3:sine}) [${4:pat1}, ${5:patn}]
endsnippet

snippet e "" w
every $1 ($2)
endsnippet

snippet fe "Applying every multiple times" w
foldEvery [${1:3}, ${2:4}] ($5)
endsnippet

snippet rx "" w
rangex ${1:lo} ${2:hi} ${3:sine}
endsnippet

snippet run "Generates numbers from 0 to n-1 inclusive" w
run $1
endsnippet

snippet sc "" w
scale "${1:indian}" "$2"
endsnippet

snippet gs "Build and name new scale" w
let scale = getScale (scaleTable ++ [("$1", [$2])])
endsnippet

snippet ts "Apply scale without naming it" w
toScale [$1] "$2"
endsnippet

snippet si "Superimpose" w
superimpose ($1)
endsnippet

snippet layer "" w
layer [${1:id},  $2]
endsnippet

snippet overlay "Use inside function like (n etc...)" w
overlay ("$1" "$2")
endsnippet

snippet nudge "nudge" w
nudge "$1"
endsnippet

snippet i "Pushes divisions to left" w
iter "$1"
endsnippet

snippet chunk "Applies functions to divisions (similar to iter, but moves to right)" w
chunk ${1:4} ($2)
endsnippet

snippet hurry "" w
hurry "$1"
endsnippet

snippet swing "1/3. Swing can push elements out of existence if it is split between arcs" w
swing $1
endsnippet

snippet sB "1/2 for some reason just pushes element normally. If we use div by 2 sequences" w
swingBy (${1:1/3}) ${2:4}
endsnippet

snippet inv "" w
inv $1
endsnippet

snippet ghost "" w
ghost
endsnippet

snippet fs "" w
fastspread ($) [$1]
endsnippet

snippet spread "" w
spread ($) [$1]
endsnippet

# Random functions

snippet wr "Continous! Always use numbers (more safe). Fist value then probability" w
wchoose [($1,$2),($3,$4)]
endsnippet

snippet choose "Continous! So it cannot be used as structure pattern" w
choose [$1]
endsnippet

snippet rc "Pick random every cycle" w
randcat [$1]
endsnippet

snippet wc "" w
wrandcat [("$1", ${2:0.5})$3]
endsnippet

snippet degrade "Degrade by 50%. Similar to ?" w
degrade
endsnippet

snippet dB "Degrade by x amount" w
degradeBy ${1:0.1}
endsnippet

snippet sometimes "" w
sometimes ($1)
endsnippet

snippet sB "" w
sometimesBy "$1" ($2)
endsnippet

snippet sC "" w
someCycles ($1)
endsnippet

snippet scB "" w
someCyclesBy $1 ($2)
endsnippet

snippet rC "Repeat each random cycle" w
repeatCycles ${1:3}
endsnippet

snippet outside "tasty with repeatCycles" w
outside ${1:2} $0
endsnippet

snippet sC "" w
spreadChoose ($) [$1]
endsnippet

snippet scramble "Divides the pattern and returns a new pattern by randomly selecting. Can repeat." w
scramble ${1:4}
endsnippet

snippet shuffle "" w
shuffle ${1:4}
endsnippet

# Binary

snippet binary "max 255 values" w
binary $1
endsnippet

snippet bN "inf values. It needs to be 2**n + 1 (like 251)" w
binaryN $1 ${2:512}
endsnippet

snippet ascii "8 bit like binary" w
ascii $1
endsnippet

snippet struct "" w
struct ($1)
endsnippet

snippet setb "" w
setB "$1" $0
endsnippet

snippet mask "Binary gain of 1s and 0s. It's like gain but with binary functions like inv" w
mask ($1)
endsnippet

snippet sew "1(t) for the first pattern. 0(f) for the second one. Structure comes from source patterns." w
sew "$1" ($2) ($3)
endsnippet

snippet stitch "1(t) for the first pattern. 0(f) for the second one. Structure comes from binary pattern." w
stitch "$1" ($2) ($3)
endsnippet

# Controls

snippet c "Replace pattern (including its stucture)" w
const ($1)
endsnippet

snippet vowel "" w
vowel $0
endsnippet

snippet crush "1 - 16. 1 results in a drastic bit of reduction" w
crush $0
endsnippet

snippet shape "simple distortion. 0 to 1. 1 max distortion" w
shape $0
endsnippet

snippet triode "Triode tanh distortion 0 to n" w
triode $0
endsnippet

snippet fshift "Absolute frequency shift" w
fshift $0
endsnippet

snippet o "" w
octave $0
endsnippet

snippet l "" w
legato $0
endsnippet

snippet l2 "" w
legato 2
endsnippet

snippet l5 "" w
legato 5
endsnippet

snippet lr "" w
legato (rand * ${1:1} + $1)
endsnippet

snippet squiz "simplistic pitch raising. 1 .. n" w
squiz $0
endsnippet

snippet lpf "low pass filter" w
lpf $1
endsnippet

snippet lpq "low pass filter" w
lpf $1 # lpq $0
endsnippet

snippet hpf "high pass filter" w
hpf $1
endsnippet

snippet hpq "high pass filter" w
hpf $1 # hpq $0
endsnippet

snippet djf "0-0.49 lpf, 0.51-1 hpf" w
djf $0
endsnippet

snippet r "rate" w
speed $0
endsnippet

snippet cut "1..n - group, -1 only cut same samples, 0 no cutting. [1 2 n] cut pattern" w
cut $0
endsnippet

snippet coarse "lowers the sample rate of a sample. i.e. 1 for original 2 for half, 3 for a third and so on." w
coarse $0
endsnippet

snippet attack "changes the fade in time of a sample" w
attack $0
endsnippet

snippet accelerate "" w
accelerate $0
endsnippet

snippet a "" w
gain $1
endsnippet

snippet ro "" w
room $1
endsnippet

snippet nudge "based on 60 beat temopo no matter cps" w
nudge "$1"
endsnippet

snippet begin "changes the start position of a sample" w
begin "$1"
endsnippet

snippet waveloss "0-100(max)" w
waveloss "$1"
endsnippet

snippet tremdp "tremolo depth. 0 - 1" w
tremdp "$1"
endsnippet

snippet tremr "tremolo rate" w
tremr "$1"
endsnippet

snippet de "" w
delay "$1" # delayfb "$2" # delayt "$3"
endsnippet

snippet lock "Lock delay to cps" w
lock 1
endsnippet

# Patterns

snippet of "Superimpose and shift in time" w
off $1 ($2)
endsnippet

snippet se "Use to change randomness seed" w
(0.000000${1:1} <~)
endsnippet

snippet st "stut :: Pattern Integer -> Pattern Double -> Pattern Rational -> ControlPattern -> ControlPattern" w
stut ${1:depth} ${2:fb} ${3:delay}${VISUAL}
endsnippet

snippet sw "stut :: Pattern Integer -> Pattern Double -> Pattern Rational -> ControlPattern -> ControlPattern" w
stutWith ${1:2} ${2:0.5} (${3:fn})${VISUAL}
endsnippet

snippet dr "" w
drt 9 # drtd 1 # datk 0.05
endsnippet

snippet rw "L-system. No spaces after commas allowed. Wraps if taken more elements than exists" w
(step' ["$1", "$2"] (take ${3:24} $ lindenmayer ${4:5} "0:$5,1:$6,~:$7" "0"))
endsnippet

snippet pfm "Markov chain" w
(fmap ([$1,$2]!!) $ markovPat ${3:8} 1 [[$4,$5], [$6,$7]])
endsnippet

snippet mm "L-system. No spaces after commas allowed. Wraps if taken more elements than exists" w
(step' ["$1", "$2"] (take ${3:24} $ lindenmayer ${4:5} "0:$5,1:$6,~:$7" "0"))
endsnippet

snippet nt "" w
nTake "$1" [$2]
endsnippet

snippet nc "" w
nCount "$1"
endsnippet

snippet nct "" w
nCountTo "$1"
endsnippet

snippet p "" w
stack [
  ${VISUAL}$1
	,
  $2
]
endsnippet

snippet pp "$6 means how many repetitions for event divided by elements in cycle" w
let ${1:pats} =
      [
        ("${2:a}", stack [$3
                    ]
        ),
        ("${4:b}", stack [$5
                    ]
        )
      ]
in
d1 $ ur $6 "$7" $1 []
endsnippet

snippet pfx "ur with effects" w
let ${1:pats} =
      [
        ("${2:a}", stack [$3
                    ]
        ),
        ("${4:b}", stack [$5
                    ]
        )
      ]
      fx = [("${6:a}", ($7))]
in
d1 $ ur $8 "$9" $1 fx
endsnippet

snippet psp "Similar to SC Pspawner. Stack by default" b
do
{
  resetCycles;
  d${1:1} $ seqP [
    (${2:0}, ${3:12}, ${VISUAL}$4)$5
  ]
}
endsnippet

snippet ps "Similar to SC Pspawner. Stack by default" w
seqP [(0, ${1:24},
  ${VISUAL}$2)]
endsnippet

snippet psl "To loop specific amount wrap inside seqP. Similar as wrapping in Pn in SC" b
do
{
  resetCycles;
  d${1:1} $ seqPLoop [
    (${2:0}, ${3:12}, ${VISUAL}$4)$5
  ]
}
endsnippet

snippet rL "Only offsets seqPLoop first cycle " b
rotL ${1:3}
endsnippet

snippet pls "Start at specific cycle" b
do
{
  resetCycles;
  d${1:1} $ rotL ${2:4} $ seqP [
    (${3:0}, ${4:12}, ${VISUAL}$5)$6
  ]
}
endsnippet

# Envelopes
snippet et "triange" w
smooth "$1"
endsnippet

snippet el "Linear envelope. Use for gain with trigger, etc. We can range it" w
envL
endsnippet

snippet es "" w
sine
endsnippet

snippet etr "A triangle wave, starting at 0, then linearly rising to 1 halfway through a cycle, then down again." w
tri
endsnippet

snippet esa "" w
saw
endsnippet

snippet ec "sine shifted in time by a quarter of a cycle" w
cosine
endsnippet

snippet esq "A squarewave, starting at 0, then going up to 1 halfway through a cycle" w
square
endsnippet

snippet ei "" w
irand $1 + 1
endsnippet

snippet eb "between 0 and 1" w
brand
endsnippet

snippet ep "random walk random" w
perlin
endsnippet

# Transistions

snippet f "Solves problem of clipping for fast spawning synths" w
fadeTime ${1:0.1}
endsnippet

snippet clutch "transistion by replacaing events" w
clutch ${1:`!p if not snip.c: snip.rv = cycle_index()`} $ $0
endsnippet

snippet ci "transistion by replacaing events in n of cycles" w
clutchIn ${1:`!p if not snip.c: snip.rv = cycle_index()`} ${2:10} $ $0
endsnippet

snippet xf "transistion by fading gain" w
xfade ${1:`!p if not snip.c: snip.rv = cycle_index()`} $ $0
endsnippet

snippet xfi "transistion by fading gain in n of cycles" w
xfadeIn ${1:`!p if not snip.c: snip.rv = cycle_index()`} ${2:10} $ $0
endsnippet

snippet interpolate "morph control values between patterns in four cycles" w
interpolate ${1:`!p if not snip.c: snip.rv = cycle_index()`} $ $0
endsnippet

snippet in "morph control values between patterns in n cycles" w
interpolateIn ${1:`!p if not snip.c: snip.rv = cycle_index()`} ${2:10} $ $0
endsnippet

snippet t "Trigger on specified channel revaluation (can be itself)" w
trigger ${1:`!p if not snip.c: snip.rv = cycle_index()`} $ $0
endsnippet

# Language

snippet do "Block" b
do
	${VISUAL}$0
endsnippet

snippet fn "Function" b
$1 = ${VISUAL}$0
endsnippet

snippet v "Assign variable in scoped environment" b
let $1 = ${VISUAL}$0
endsnippet

# Chords and scales

# https://en.wikipedia.org/wiki/List_of_chords

# etc
snippet five "Perfect fifth " w
[0, 7]
endsnippet

snippet min6th "Emotion anguish. But its subjective. Maybe its pulling etc." w
[0, 8]
endsnippet

snippet maj6th "" w
[0, 8]
endsnippet

snippet 9s5 "Octave chord" w
[0, 1, 13]
endsnippet

snippet m9s5 "Octave chord but dramatic" w
[0, 1, 14]
endsnippet

snippet 7s5f9 "Serious" w
[0, 4, 8, 10, 13]
endsnippet

# major
snippet maj "" w
[0, 4, 7]
endsnippet

snippet maj7 "" w
[0, 4, 7, 11]
endsnippet

snippet maj9 "Almost double major tom" w
[0, 4, 7, 11, 14]
endsnippet

snippet add9 "Energetic, bright" w
[0, 4, 7, 14]
endsnippet

snippet dom7 "More dissonant long major" w
[0, 4, 7, 10]
endsnippet

snippet dom7a "More dissonant long major" w
0 4 7 10
endsnippet

snippet indian "Last note is amazing" w
0 4 5 7 10
endsnippet

snippet six "" w
[0, 4, 7, 9]
endsnippet

snippet 6by9 "Super happy long" w
[0, 4, 7, 9, 14]
endsnippet

snippet 7f9 "Dramatic and shocking" w
[0, 4, 7, 10, 13]
endsnippet

snippet 7f10 "" w
[0, 4, 7, 10, 15]
endsnippet

snippet eleven "Expansive" w
[0, 4, 7, 10, 14, 17]
endsnippet

snippet 11s "Wonky expansive" w
[0, 4, 7, 10, 14, 18]
endsnippet

snippet maj11 "Expansive, but happier?" w
[0, 4, 7, 11, 14, 17]
endsnippet

# minor
snippet min "" w
[0, 3, 7]
endsnippet

snippet m6 "" w
[0, 3, 7, 9]
endsnippet

snippet min7 "" w
[0, 3, 7, 10]
endsnippet

snippet min9 "" w
[0, 3, 7, 10, 14]
endsnippet

snippet m11 "" w
[0, 3, 7, 10, 14, 17]
endsnippet

snippet m6by9 "" w
[0, 3, 7, 9, 14]
endsnippet

snippet m7f9 "Dramatic" w
[0, 3, 7, 10, 13]
endsnippet

# diminished
snippet dim "Very serious, like asking a question" w
[0, 3, 6]
endsnippet

snippet dim7 "More expansive than dim" w
[0, 4, 6, 9]
endsnippet

snippet pow "Powerchord" w
[0, 7, 12]
endsnippet

snippet 7f5 "Ugly" w
[0, 4, 6, 10]
endsnippet

snippet 7s5 "Ugly and bright" w
[0, 4, 8, 10]
endsnippet

snippet m7f5 "Pathetic" w
[0, 3, 6, 10]
endsnippet

# augmented
snippet aug "Sadder major" w
[0, 4, 8]
endsnippet

snippet msharp5 "More expansive sad minor" w
[0, 3, 8]
endsnippet

# suspended
snippet sus2 "Bright clean, beutiful. Sounds lower than major" w
[0, 2, 7]
endsnippet

snippet sus4 "More bright than sus2." w
[0, 5, 7]
endsnippet

snippet 7sus2 "" w
[0, 2, 7, 10]
endsnippet

snippet 7sus4 "" w
[0, 5, 7, 10]
endsnippet

snippet 7sus4a "" w
0 5 7 10
endsnippet

snippet 9sus4 "" w
[0, 5, 7, 10, 14]
endsnippet

# Chords

# https://www.ableton.com/en/manual/live-midi-effect-reference/

# [0,1,2,3]
# using without chords is unpredictable

snippet up "0 1 2 3" w
up
endsnippet

snippet down "3 2 1 0" w
down
endsnippet

snippet updown "0 1 2 3 2 1" w
updown
endsnippet

snippet downup "3 2 1 0 1 2" w
downup
endsnippet

snippet converge "0 3 1 2" w
converge
endsnippet

snippet diverge "2 1 3 0" w
diverge
endsnippet

snippet disconverge "0 3 1 2 1 3 0" w
disconverge
endsnippet

snippet pinkyup "0 3 1 3 2 3" w
pinkyup
endsnippet

snippet pinkyupdown "0 3 1 3 2 3 2 3 1 3" w
pinkyupdown
endsnippet

snippet thumbup "0 1 0 2 0 3" w
thumbup
endsnippet

snippet thumbupdown "0 1 0 2 0 3 0 2 0 1" w
thumbupdown
endsnippet

# OSC Control
snippet cF "Float" w
cF 1 "$1"
endsnippet

snippet cI "Integer" w
cI 1 "$1"
endsnippet

snippet cS "String" w
cS 1 "$1"
endsnippet

snippet cB "Boolean" w
cB 1 "$1"
endsnippet

# Colors
# https://www.rapidtables.com/web/color
snippet "(c1|Blue)" "blue" r
-- Blue
endsnippet

snippet "(c2|Red)" "red" r
-- Red
endsnippet

snippet "(c3|Green)" "green" r
-- Green
endsnippet

snippet "(c4|Navy)" "blue" r
-- Navy
endsnippet

snippet "(c5|Aqua)" "cyan" r
-- Aqua
endsnippet

snippet "(c6|Olive)" "green" r
-- Olive
endsnippet

snippet "(c7|Maroon)" "red" r
-- Maroon
endsnippet

snippet "(c8|Teal)" "cyan" r
-- Teal
endsnippet

snippet "(c9|Plum)" "purple" r
-- Plum
endsnippet

snippet "(c10|Lime)" "green" r
-- Lime
endsnippet

snippet "(c11|Salmon)" "red" r
-- Salmon
endsnippet

snippet "(c12|Indigo)" "purple" r
-- Indigo
endsnippet

snippet "(c13|Grey)" "grey" r
-- Grey
endsnippet

snippet "(c14|Crimson)" "red" r
-- Crimson
endsnippet

snippet "(c15|Khaki)" "gold" r
-- Khaki
endsnippet

snippet "(c16|Brown)" "brown" r
-- Brown
endsnippet

snippet "(c17|Purple)" "purple" r
-- Purple
endsnippet

snippet "(c18|Tomato)" "orange" r
-- Tomato
endsnippet

# Link
# sendMsg sock "bpm 60"
snippet lp "" b
sock <- carabiner tidal 4 (-0.14)
endsnippet

# MIDI
snippet m "vim default fold" w
# s "midi" # midichan ${0:0}
endsnippet

# Rack
# requires setcps 1 to work properly
snippet a01 "" iwA
[0 1]
endsnippet

priority 10

# Folds
snippet f "vim default fold" b
-- {{{ $1
${VISUAL}$0
-- }}}
endsnippet
