global !p

def cycle_index():
	i = vim.current.window.cursor[0] - 1
	regex = f'^\s*d([0-9]+)'
	while i >= 0:
		m = re.match(regex, snip.buffer[i])
		if m:
			return int(m.group(1))
		i -= 1
	return 0

endglobal

# JIT like

snippet j "Sound pattern" b
d${1:`!p if not snip.c: snip.rv = cycle_index() + 1`} $$2 s "${VISUAL}$3"
endsnippet

snippet jo "Play once independant of cycles" b
once $$1 s "${VISUAL}$2"
endsnippet

snippet js "Silence a pattern" b
d${1:`!p if not snip.c: snip.rv = cycle_index()`} silence
endsnippet

snippet j1 "Silence all except this" b
solo ${1:`!p if not snip.c: snip.rv = cycle_index()`}
endsnippet

snippet ju "Undo solo action" b
unsolo ${1:`!p if not snip.c: snip.rv = cycle_index()`}
endsnippet

# Functions

snippet fa "Spread chords of note numbers over time" w
arpg "$1"
endsnippet

snippet fj "" w
jux ($1)
endsnippet

snippet fr "Generates numbers from 0 to n-1 inclusive" w
(run $1)
endsnippet

snippet fS "" w
scale "${1:phrygian}" "$2"
endsnippet

snippet fo "Superimpose and shift in time" w
off $1 ($2)
endsnippet

snippet fsu "Superimpose" w
superimpose ($1)
endsnippet

snippet fnu "nudge" w
nudge "$1"
endsnippet

snippet fs "" w
struct "$1"
endsnippet

snippet fm "" w
mask "$1"
endsnippet

snippet ffsp "" w
fastspread ($) [$1]
endsnippet

snippet fsp "" w
spread ($) [$1]
endsnippet

# Random functions

snippet rs "" w
sometimes ($1)
endsnippet

snippet rsc "" w
someCyclesBy $1 ($2)
endsnippet

snippet rsp "" w
spreadChoose ($) [$1]
endsnippet

# Controls

snippet n "" w
n "$1" $0
endsnippet

snippet s "" w
s "$1" $0
endsnippet

snippet cw "" w
vowel "$1" $0
endsnippet

snippet cr "1 - 16. 1 results in a drastic bit of reduction" w
crush "$1"
endsnippet

snippet cs "simplistic pitch raising. 1 .. n" w
squiz "$1"
endsnippet

snippet cc "1..n - group, -1 only cut same samples, 0 no cutting. [1 2 n] cut pattern" w
cut "$1"
endsnippet

# Patterns

snippet pst "stut :: Pattern Integer -> Pattern Double -> Pattern Rational -> ControlPattern -> ControlPattern" w
stut ${1:depth} ${2:fb} ${3:delay} ${VISUAL}$0
endsnippet

snippet psw "stut :: Pattern Integer -> Pattern Double -> Pattern Rational -> ControlPattern -> ControlPattern" w
stutWith ${1:2} ${2:0.5} (${3:fn}) ${VISUAL}$0
endsnippet

snippet ppar "" w
stack [${VISUAL}$1]
endsnippet

snippet psp "Similar to SC Pspawner" b
do
{
	resetCycles;
	d${1:1} $ seqP [
		(${2:0}, ${3:12}, ${VISUAL}$4)$5
	]
}
endsnippet

snippet pspl "" b
do
{
	resetCycles;
	d${1:1} $ seqPLoop [
		(${2:0}, ${3:12}, ${VISUAL}$4)$5
	]
}
endsnippet

snippet pspw "" b
do
{
	resetCycles;
	d${1:1} $ rotL ${2:4} $ seqP [
		(${3:0}, ${4:12}, ${VISUAL}$5)$6
	]
}
endsnippet

# Language

snippet do "Block" b
do
	${VISUAL}$0
endsnippet

snippet fn "Function" b
$1 = ${VISUAL}$0
endsnippet

snippet v "Assign variable in scoped environment" b
let $1 = ${VISUAL}$0
endsnippet

# Samples/buffers

snippet dck "" w
clubkick:${1:0}
endsnippet

snippet ddk "" w
drumtraks:${1:6}
endsnippet

snippet dkl "" w
kicklinn:${1:3}
endsnippet

snippet dho "open hat" w
ho:${1:0}
endsnippet

snippet dhc "closed hat" w
hc:${1:0}
endsnippet
