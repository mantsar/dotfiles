global !p

def cycle_index():
	i = vim.current.window.cursor[0] - 1
	regex = f'^\s*d([0-9]+)'
	while i >= 0:
		m = re.match(regex, snip.buffer[i])
		if m:
			return int(m.group(1))
		i -= 1
	return 0

endglobal

# JIT like

snippet j "Sound pattern" b
d${1:`!p if not snip.c: snip.rv = cycle_index() + 1`} $$2 s "${VISUAL}$3"
endsnippet

snippet jo "Play once independant of cycles" b
once $$1 s "${VISUAL}$2"
endsnippet

snippet js "Silence a pattern" b
d${1:`!p if not snip.c: snip.rv = cycle_index()`} silence
endsnippet

snippet j1 "Silence all except this" b
solo ${1:`!p if not snip.c: snip.rv = cycle_index()`}
endsnippet

snippet ju "Undo solo action" b
unsolo ${1:`!p if not snip.c: snip.rv = cycle_index()`}
endsnippet

snippet D "Deconstruct" b
deconstruct ${1:n} ${2:str}
endsnippet

# Envelopes
snippet et "triange" w
smooth "$1"
endsnippet

# Functions

snippet .. "" w
${1:0} .. $2
endsnippet

snippet <~ "" w
($1 <~)
endsnippet

snippet ~> "" w
($1 ~>)
endsnippet

snippet fa "Spread chords of note numbers over time" w
arpg "$1"
endsnippet

snippet fwi "" w
within (0.${1:0}, 1.${2:0}) ($3)
endsnippet

snippet fpal "" w
palindrome
endsnippet

snippet fin "" w
inside "$1"
endsnippet

snippet fbr "" w
brak
endsnippet

snippet fp "repeats each event the given number of times" w
ply "$1"
endsnippet

snippet pif "" w
fix ($1) (${2:n} "$3")
endsnippet

snippet fj "" w
jux ($1)
endsnippet

snippet fre "" w
rev
endsnippet

snippet fra "" w
range ${1:lo} ${2:hi} ${3:sine}
endsnippet

snippet fw "" w
whenmod ${1:9} ${2:7} ($3)
endsnippet

snippet frx "" w
rangex ${1:lo} ${2:hi} ${3:sine}
endsnippet

snippet fr "Generates numbers from 0 to n-1 inclusive" w
run $1
endsnippet

snippet fS "" w
scale "${1:phrygian}" "$2"
endsnippet

snippet fo "Superimpose and shift in time" w
off $1 ($2)
endsnippet

snippet fsu "Superimpose" w
superimpose ($1)
endsnippet

snippet fnu "nudge" w
nudge "$1"
endsnippet

snippet fi "" w
iter "$1"
endsnippet

snippet fh "" w
hurry "$1"
endsnippet

snippet fs "" w
struct "$1"
endsnippet

snippet fg "" w
ghost
endsnippet

snippet fm "" w
mask "$1"
endsnippet

snippet ffsp "" w
fastspread ($) [$1]
endsnippet

snippet fsp "" w
spread ($) [$1]
endsnippet

snippet fsp "" w
spread ($) [$1]
endsnippet

# Random functions

snippet rs "" w
sometimes ($1)
endsnippet

snippet rsc "" w
someCyclesBy $1 ($2)
endsnippet

snippet rsp "" w
spreadChoose ($) [$1]
endsnippet

snippet rc "" w
choose [$1]
endsnippet

snippet ri "" w
irand $1 + 1
endsnippet

# Controls

snippet n "" w
n "$1" $0
endsnippet

snippet s "" w
s "$1" $0
endsnippet

snippet cw "" w
vowel "$1"
endsnippet

snippet cr "1 - 16. 1 results in a drastic bit of reduction" w
crush "$1"
endsnippet

snippet cs "simple distortion. 0 to 1. 1 max distortion" w
shape "$1"
endsnippet

snippet csq "simplistic pitch raising. 1 .. n" w
squiz "$1"
endsnippet

snippet cl "low pass filter" w
lpf "$1"
endsnippet

snippet cc "1..n - group, -1 only cut same samples, 0 no cutting. [1 2 n] cut pattern" w
cut "$1"
endsnippet

snippet coa "lowers the sample rate of a sample. i.e. 1 for original 2 for half, 3 for a third and so on." w
coarse "$1"
endsnippet

snippet cat "changes the fade in time of a sample" w
attack "$1"
endsnippet

snippet ca "" w
accelerate "$1"
endsnippet

snippet cg "" w
gain $1
endsnippet

snippet cn "based on 60 beat temopo no matter cps" w
nudge "$1"
endsnippet

snippet cb "changes the start position of a sample" w
begin "$1"
endsnippet

snippet cwa "0-100(max)" w
waveloss "$1"
endsnippet

snippet ctd "tremolo depth. 0 - 1" w
tremdp "$1"
endsnippet

snippet ctr "tremolo rate" w
tremr "$1"
endsnippet

# Patterns

snippet pst "stut :: Pattern Integer -> Pattern Double -> Pattern Rational -> ControlPattern -> ControlPattern" w
stut ${1:depth} ${2:fb} ${3:delay} ${VISUAL}$0
endsnippet

snippet psw "stut :: Pattern Integer -> Pattern Double -> Pattern Rational -> ControlPattern -> ControlPattern" w
stutWith ${1:2} ${2:0.5} (${3:fn}) ${VISUAL}$0
endsnippet

snippet ppar "" w
stack [
	${VISUAL}$1
]
endsnippet

snippet psp "Similar to SC Pspawner" b
do
{
	resetCycles;
	d${1:1} $ seqP [
		(${2:0}, ${3:12}, ${VISUAL}$4)$5
	]
}
endsnippet

snippet pspl "" b
do
{
	resetCycles;
	d${1:1} $ seqPLoop [
		(${2:0}, ${3:12}, ${VISUAL}$4)$5
	]
}
endsnippet

snippet pspw "" b
do
{
	resetCycles;
	d${1:1} $ rotL ${2:4} $ seqP [
		(${3:0}, ${4:12}, ${VISUAL}$5)$6
	]
}
endsnippet

# Language

snippet do "Block" b
do
	${VISUAL}$0
endsnippet

snippet fn "Function" b
$1 = ${VISUAL}$0
endsnippet

snippet v "Assign variable in scoped environment" b
let $1 = ${VISUAL}$0
endsnippet

# Samples/buffers

snippet dck "" w
clubkick:${1:0}
endsnippet

snippet ddk "" w
drumtraks:${1:6}
endsnippet

snippet dkl "" w
kicklinn:${1:3}
endsnippet

snippet dho "open hat" w
ho:${1:0}
endsnippet

snippet dhc "closed hat" w
hc:${1:0}
endsnippet

# Colors
snippet #b "" w
-- Blue
endsnippet

snippet #r "" w
-- Red
endsnippet

snippet #g "" w
-- Green
endsnippet

snippet #l "" w
-- Lime
endsnippet

snippet #o "" w
-- Olive
endsnippet

snippet #a "" w
-- Aqua
endsnippet

snippet #t "" w
-- Teal
endsnippet

snippet #n "" w
-- Navy
endsnippet

snippet #p "" w
-- Plum
endsnippet

snippet #P "" w
-- Purple
endsnippet

snippet #G "" w
-- Gray
endsnippet

snippet #b "" w
-- Brown
endsnippet

snippet #k "" w
-- Khaki
endsnippet

snippet #c "" w
-- Crimson
endsnippet

snippet #T "" w
-- Tomato
endsnippet
