snippet o "Shows all defined options" b
options()
endsnippet

snippet bs "System time benchmark" w
system.time({$1})
endsnippet

snippet l "" b
library($1)
endsnippet

snippet pl "load packages" w
pacman::p_load(
  "$1",
  install = FALSE
)
endsnippet

snippet an "" w
as.numeric($1)
endsnippet

snippet if "" w
if ($1) {$2}
endsnippet

snippet ife "" w
if ($1) {$2} else {$3}
endsnippet

snippet ifee "" w
if ($1) {$2} else if ($3) {$4} else {$5}
endsnippet

snippet sw "base `starts with` without regex" w
startsWith(${1:string}, ${2:pattern})
endsnippet

snippet sd "stringr::" w
str_detect(${1:string}, ${2:pattern})
endsnippet

snippet sl "stringr::" w
str_length(${1:string})
endsnippet

snippet sc "stringr::" w
str_collapse(${1:string}, collapse = ${2: ", "})
endsnippet

snippet ss "stringr::" w
str_split(${1:string}, ${2: ","}, simplify = TRUE)
endsnippet

snippet sr "stringr::" w
str_replace(${1:string}, ${2:pattern}, ${3:replacement})
endsnippet

snippet sra "stringr::" w
str_replace_all(${1:string}, ${2:pattern}, ${3:replacement})
endsnippet

snippet se "stringr::" w
regexplain::regexplain_gadget(${1:string}, ${2:pattern})
endsnippet

snippet g "glue" w
glue("$1")
endsnippet

snippet gd "glue data. useful with %>%" w
glue_data("$1")
endsnippet

snippet mc "purrr::" w
map_chr(${1:vectors}, ${2:function})
endsnippet

snippet md "purrr::" w
map_dbl(${1:vectors}, ${2:function})
endsnippet

snippet ml "purrr::" w
map_lfl(${1:vectors}, ${2:function})
endsnippet

snippet mi "purrr::" w
map_int(${1:vectors}, ${2:function})
endsnippet

snippet m "purrr::" w
map(${1:vectors}, ${2:function})
endsnippet

snippet mw "purrr::" w
walk(${1:vectors}, ${2:function})
endsnippet

snippet mpw "purrr::" w
pwalk(list(${1:vectors}), ${2:function})
endsnippet

snippet ts "tidyr separate" w
separate(${1:sep})
endsnippet

snippet tr "" w
fread($1)
endsnippet

snippet ad "" w
setDT(${VISUAL}$1)
endsnippet

snippet ai "" w
ui <- fluidPage(
  $1
)

server <- function(input, output, session) {
  $2
}

shinyApp(ui, server)
endsnippet

snippet rto "" b
output$${1:id} <- renderText({
  $2
})
endsnippet

snippet rt "" b
renderText({
  $1
})
endsnippet

snippet rdt "" b
renderTable({
  $1
})
endsnippet

snippet rui "" b
renderUI({
  $1
})
endsnippet

snippet rp "" w
renderPlot({
  $1
})
endsnippet

snippet i "" w
input$${1:id}
endsnippet

snippet uto "" w
textOutput("${1:id}")
endsnippet

snippet uti "" w
textInput("${1:id}", "${2:label}")
endsnippet

snippet usi "" w
selectInput("${1:id}", "${2:label}", choices = c($3))
endsnippet

snippet ucgi "" w
checkboxGroupInput("${1:id}", "${2:label}", choices = c($3))
endsnippet

snippet uab "" w
actionButton("${1:id}", "${2:label}")
endsnippet

snippet ud "" w
downloadHandler(
  filename = "report.pdf",
  content = function(file) {
    temp_report <- file.path(tempdir(), "report.Rmd")
    file.copy("report.Rmd", temp_report, overwrite = TRUE)
    params <- list(${1:n} = input$$2)
    rmarkdown::render(temp_report, output_file = file,
      params = params,
      envir = new.env(parent = globalenv())
    )
  }
  )
endsnippet

snippet dm "mutate" w
mutate($1)
endsnippet

snippet df "mutate" w
filter($1)
endsnippet

snippet .d "mutate" w
.data[[${1:input$var}]]
endsnippet

snippet dbc "dbplyr::" w
con <- DBI::dbConnect(RSQLite::SQLite(), "${1:path}")
endsnippet

snippet dbt "dbplyr::" w
${1:dt} <- tbl(con, "${2:collection}")
endsnippet

snippet p "" w
ggplot($1, aes($2, $3)) +
  $0
endsnippet

snippet pp "scatter" w
geom_point($1)
endsnippet
