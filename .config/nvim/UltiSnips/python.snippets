extends live_coding

global !p
 11G = vim.current.window.cursor[0] - 1
	regex = f'^\s*b([0-9]+)\s*>>.*'
	while i >= 0:
		m = re.match(regex, snip.buffer[i])
		if m:
			return int(m.group(1))
		i -= 1
	return 0

endglobal

# JIT like

snippet j "Play SynthDef" b
d${1:`!p if not snip.c: snip.rv = player_indexd() + 1`} >> ${2:viola}(${VISUAL}$3)
endsnippet

snippet k "Play sample" b
b${1:`!p if not snip.c: snip.rv = player_indexb() + 1`} >> play("$2"$3)
endsnippet

snippet js "Stop player" b
d${1:`!p if not snip.c: snip.rv = player_indexd()`}.stop()
endsnippet

snippet ks "Stop player" b
b${1:`!p if not snip.c: snip.rv = player_indexb()`}.stop()
endsnippet

snippet jas "Solo patterns starting with letter" b
${1:b}_all.solo(1)
endsnippet

# Functions

snippet v "By default duration is 4 beat (one bar)" w
var([$1])
endsnippet

snippet v. "Solves a problem of need to reevaluate all places where var is used after chaning" w
var.$1([$2])
endsnippet

snippet .t "Dynamically apply function on pattern or var" i
.tranform($1)
endsnippet

snippet .f "Follow previous player" i
.follow(${1:d1})
endsnippet

# off methods similar to tidal cycles
snippet .oa "Similar to tidal" i
.offadd(${1:2}, ${2:dur})
endsnippet

snippet ofa "" w
offadd
endsnippet

snippet ofm "" w
offmul
endsnippet

snippet st "" w
stutter
endsnippet

snippet .e "Similar to tidal cycles. Works on cycles (repetitions)" i
.every(${1:3}, ${2:offadd})
endsnippet

snippet .ne "" i
.never("$1")
endsnippet

snippet .z "zip into tuples like in Python (good for making chords)" i
.zip(${1:[4,5]})
endsnippet

snippet .sp "makes stereo more spacious" i
.spread()
endsnippet

snippet .sf "" i
.shuffle()
endsnippet

snippet .m "can provide default if mapping was not found (default=x)" i
.map({$1:$2})
endsnippet

snippet .a "select closest value in the list. default is rel[0, 2, 4]" i
.accompany(rel=[0,2,4$1])
endsnippet

snippet .st "stutter" i
.stutter(${1:2})
endsnippet

snippet .ro "rotate. same as rot in Tidal" i
.rotate(${1:1})
endsnippet

snippet .n "same as .pitch" i
.degree(${1:1})
endsnippet

snippet c "" w
const($1)
endsnippet

# Patterns

snippet p "Pattern" w
P[$1]$0
endsnippet

snippet p( "Pgroup" w
P($1)$0
endsnippet

snippet p* "Spread over player dur value" w
P*($1)$0
endsnippet

snippet p** "Same as P*, but randomizes order" w
P**($1)$0
endsnippet

snippet p+ "Spread over player sus value" w
P*($1)$0
endsnippet

snippet pst "Creates a Pattern of length n with the last element set to value. All other values are set to default" w
Pstep(${1:5},${VISUAL}$1,0)
endsnippet

snippet pE "Euclidian pattern" w
PEuclid(${1:3},${2:8})
endsnippet

# ,${3:0},${4:0.25}
snippet pe "Returns the output of PEuclid as a series of durations where each element is a step of duration dur" w
PDur(${1:3},${2:8})
endsnippet

# ,${3:1}
snippet pser "Arithmetic series" w
PRange(${1:0},${2:1})
endsnippet

snippet ptr "Ascend $1 - 1 descend start + 1" w
PTri(${1:5})
endsnippet

snippet pr "Like Pwhite but for integers only or Prand if list is supplied instead. Start and end are included! Last argument - seed" w
PRand(${1:4})
endsnippet

snippet pxr "Same as Prand, but no elements are repeated" w
PxRand(${1:4})
endsnippet

snippet pwr "Controlled randomness. Weight of 2 means it is twice as likely to be picked as an item with a weight of 1" w
PwRand([${VISUAL}$1],[$2])
endsnippet

snippet pw "Random values with uniform distribution" w
PWhite(${1:0},${2:1})
endsnippet

snippet pfm "Markov chain" w
PChain({${1:0}:[$2]$3})
endsnippet

snippet pwa "Random walk" w
PWalk(${1:20},${2:4},${3:5})
endsnippet

snippet pde "" w
PDelta([$1],${2:0})
endsnippet

snippet psq "Returns the series of square numbers" w
PSquare()
endsnippet

snippet pi "Returns the series of whole numbers" w
PIndex()
endsnippet

snippet M "all players in one place" b
Master()
endsnippet

snippet G "group players. can be assigned to a variable" b
Group($1)
endsnippet

# Envelopes

snippet el "" w
linvar([$1]$2)
endsnippet

snippet es "" w
sinvar([$1]$2)
endsnippet

snippet ep "" w
expvar([$1]$2)
endsnippet

# Parameters

snippet ,a "" i
, amp=$0
endsnippet

snippet ,p "" i
, pan=$0
endsnippet

snippet ,se "" i
, seed=${1:1}
endsnippet

snippet ,s "" i
, sus=${1:1}
endsnippet

snippet ,am "" i
, amplify=$0
endsnippet

snippet ,d "" i
, dur=$0
endsnippet

snippet ,o "" i
, oct=$0
endsnippet

snippet ,h "" i
, hpf=$0
endsnippet

snippet ,hq "" i
, hpr=$0
endsnippet

snippet ,ch "" i
, chop=$0
endsnippet

snippet ,sc "" i
, scale=Scale.${1:blues}
endsnippet

snippet ,R "" i
, root=$0
endsnippet

snippet ,ro "" i
, room=$1, mix=$0
endsnippet

snippet ,b "" i
, sample=$0
endsnippet

snippet ,co "" i
, coarse=$0
endsnippet

snippet ,dr "" i
, drive=$0
endsnippet

snippet ,sp "" i
, spin=$0
endsnippet

snippet ,r "sample rate (or synth param)" i
, rate=$0
endsnippet

snippet ,sl "" i
, slide=$0
endsnippet

snippet ,l "" i
, lag=$0
endsnippet

snippet ,cu "" i
, curve=$0
endsnippet

snippet ,be "" i
, bend=$0
endsnippet

snippet ,sd "" i
, slidedelay=$0
endsnippet

snippet ,de "" i
, delay=$0
endsnippet

snippet ,e "" i
, echo=$0
endsnippet

snippet ,c "" i
, chop=$0
endsnippet

# Clock

snippet t "" b
Clock.bpm = ${1:120}
endsnippet

snippet tn "" b
Clock.now()
endsnippet

snippet tp "Print value of pattern/timevar periodically" b
Clock.every(${1:1/2}, lambda: print($2))
endsnippet

# nextBar(lambda: ${1:d1.solo(1)})
snippet nb "action on next bar" b
nextBar($1)
endsnippet

snippet tf "relative" w
Clock.future(${1:1}, ${2:f}, args=$3)
endsnippet

snippet ta "absolute" w
Clock.schedule(${1:f}, ${2:1}, args=$3)
endsnippet

# Scales

snippet rd "Base note" b
Root.default = ${1:0}
endsnippet

snippet scd "Scale" b
Scale.default = "${1:major}"
endsnippet

snippet scf "freq" b
Scale.default = "${1:freq}"
endsnippet

snippet scc "freq" b
Scale.default = "${1:chromatic}"
endsnippet

snippet sc "Scale" w
Scale.${1:minor}
endsnippet

# Language

snippet fn "" b
def ${1:f}($2):
    $3
endsnippet

snippet if "" w
if $1:
    $2
endsnippet

snippet for "" b
for ${1:1} in ${2:range}
endsnippet

snippet la "" w
lambda: $0
endsnippet

# Colors
# https://www.rapidtables.com/web/color
snippet "(c1|Blue)" "blue" r
# Blue
endsnippet

snippet "(c2|Red)" "red" r
# Red
endsnippet

snippet "(c3|Green)" "green" r
# Green
endsnippet

snippet "(c4|Navy)" "blue" r
# Navy
endsnippet

snippet "(c5|Aqua)" "cyan" r
# Aqua
endsnippet

snippet "(c6|Olive)" "green" r
# Olive
endsnippet

snippet "(c7|Maroon)" "red" r
# Maroon
endsnippet

snippet "(c8|Teal)" "cyan" r
# Teal
endsnippet

snippet "(c9|Plum)" "purple" r
# Plum
endsnippet

snippet "(c10|Lime)" "green" r
# Lime
endsnippet

snippet "(c11|Salmon)" "red" r
# Salmon
endsnippet

snippet "(c12|Indigo)" "purple" r
# Indigo
endsnippet

snippet "(c13|Grey)" "grey" r
# Grey
endsnippet

snippet "(c14|Crimson)" "red" r
# Crimson
endsnippet

snippet "(c15|Khaki)" "gold" r
# Khaki
endsnippet

snippet "(c16|Brown)" "brown" r
# Brown
endsnippet

snippet "(c17|Purple)" "purple" r
# Purple
endsnippet

snippet "(c18|Tomato)" "orange" r
# Tomato
endsnippet

# Folds
snippet f "vim default fold" b
# {{{ $1
${VISUAL}$0
# }}}
endsnippet
